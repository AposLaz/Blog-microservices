version: 'version'

services:
  client:
   container_name: client
   build: 
     context: client/
     dockerfile: Dockerfile.frontend.dev
   expose: 
    - 3000 
   ports:
     - "3000:3000"
   stdin_open: true
   environment:
    REACT_APP_POST_HOST: ${REACT_APP_POST_HOST}
    REACT_APP_COMMENT_HOST: ${REACT_APP_COMMENT_HOST}
    REACT_APP_QUERY_HOST: ${REACT_APP_QUERY_HOST}
    CHOKIDAR_USEPOLLING: true
   volumes:
    - ./client/:/app/
    - /app/node_modules

  nginx:
   build:
    dockerfile: ./Dockerfile.dev
    context: ./nginx
   restart: always
   ports:
    - "3050:80"
   depends_on:
    - client
    - posts
    - comments
    - query-comments-post
    
  posts:
   container_name: posts
   build: 
      context: posts/
      dockerfile: Dockerfile.posts.dev
   command: nodemon index.js
   ports:
    - "${POST_PORT}:${POST_PORT}"
   volumes:
    - ./posts/:/app/
   environment:
    POST_PORT: ${POST_PORT}
    POST_TOPIC: ${POST_TOPIC}
    KAFKA_BROKERS: ${KAFKA_BROKERS}
   networks:
    - default
   depends_on:
    - kafka_admin

  comments:
   container_name: comments
   build: 
      context: comments/
      dockerfile: Dockerfile.comments.dev
   command: nodemon index.js
   ports:
    - "${COMMENT_PORT}:${COMMENT_PORT}"
   volumes:
    - ./comments/:/app/
   environment:
    COMMENT_PORT: ${COMMENT_PORT}
    COMMENT_TOPIC: ${COMMENT_TOPIC}
    KAFKA_BROKERS: ${KAFKA_BROKERS}
   networks:
    - default
   depends_on:
    - kafka_admin
  
  query-comments-post:
   container_name: query-comments-post
   build: 
      context: query-posts-service/
      dockerfile: Dockerfile.query.dev
   command: nodemon index.js
   ports:
    - "${QUERY_PORT}:${QUERY_PORT}"
   volumes:
    - ./query-posts-service/:/app/
   environment:
    QUERY_PORT: ${QUERY_PORT}
    POST_TOPIC: ${POST_TOPIC}
    COMMENT_TOPIC: ${COMMENT_TOPIC}
    KAFKA_BROKERS: ${KAFKA_BROKERS}
    MONGO_HOST: ${MONGO_HOST}
    MONGO_PORT: ${MONGO_PORT}
   restart: on-failure
   depends_on:
      - kafka_admin      
   networks:
    - default
    - server-database
  
  mongo:
    container_name: ${MONGO_HOST}
    image: mongo:4.2.24
    restart: always
    ports:
      - '${MONGO_PORT}:${MONGO_PORT}'
    networks:
      - server-database
      - mongo-client
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
  
  mongo-express:
    container_name: mongo-express
    image: mongo-express:1.0.0-alpha.4
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin      
      ME_CONFIG_MONGODB_SERVER: ${MONGO_HOST}
    depends_on:
      - mongodb
    networks:
      - mongo-client
    volumes:
      - mongodata:/data/db

  kafka_admin:
   container_name: kafka_admin
   build: 
      context: kafka/
      dockerfile: Dockerfile.kafka_admin.dev
   command: nodemon index.js
   volumes:
    - ./kafka/:/app/
   environment:
    KAFKA_TOPICS: ${KAFKA_TOPICS}
    KAFKA_BROKERS: ${KAFKA_BROKERS}
    KAFKA_REPLICATION_FACTOR: ${KAFKA_REPLICATION_FACTOR}
    KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
   networks:
     - default
   restart: always
   depends_on:
     control-center:
       condition: service_started
     
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
    - default

  kafka1:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka1
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8097,INTERNAL://kafka1:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
    - default
    healthcheck:
        test: ["CMD", "ping", "-c","1", "localhost:8097"]
        interval: 30s
        timeout: 10s
        retries: 5

  kafka2:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka2
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8098,INTERNAL://kafka2:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
    - default
    healthcheck:
        test: ["CMD", "ping", "-c","1", "localhost:8098"]
        interval: 30s
        timeout: 10s
        retries: 5

  kafka3:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka3
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    restart: always
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:8099,INTERNAL://kafka3:39092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
     - default
    healthcheck:
        test: ["CMD", "ping", "-c","1", "localhost:8099"]
        interval: 30s
        timeout: 10s
        retries: 5
  
  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    depends_on:
      - kafka1
      - kafka2
      - kafka3 
    ports:
      - "9021:9021"
    expose:
      - 9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:19092,kafka2:29092,kafka3:39092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      PORT: 9021
    networks:
    - default
    restart: always

volumes:
  mongodata:

networks:
    default:
      driver: bridge
    server-database:
      driver: bridge
    mongo-client:
      driver: bridge